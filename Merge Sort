// Merge Sort

#include<bits/stdc++.h>
using namespace std;

void mergeAll(int arr[], int s, int e) {
   int mid = (s+e)/2;

   int leftLength = mid - s + 1;
   int rightLength = e - mid;

   // create left and right part
   int *left = new int[leftLength];
   int *right = new int[rightLength];

   // copy into left part
   int originalIndex = s;
   for(int i=0; i<leftLength; i++) {
      left[i] = arr[originalIndex++];
   }

   // copy into right part
   originalIndex = mid+1;
   for(int i=0; i<rightLength; i++) {
      right[i] = arr[originalIndex++];
   }

   // now we have 2 sorted arrays
   //  we will merge them

   int leftIndex = 0;
   int rightIndex = 0;
   originalIndex = s;


   while(leftIndex < leftLength && rightIndex < rightLength) {
      if(left[leftIndex] <= right[rightIndex]) {
         arr[originalIndex++] = left[leftIndex++];
      }
      else {
         arr[originalIndex++] = right[rightIndex++];
      }
   }

   while(leftIndex < leftLength) {
      arr[originalIndex++] = left[leftIndex++];
   }

   while(rightIndex < rightLength) {
      arr[originalIndex++] = right[rightIndex++];
   }
}

void mergeSort(int arr[], int s, int e) {
   if(s>=e) {
      return;
   }
   int mid = (s+e)/2;
   // left part
   mergeSort(arr, s, mid);
   // right part
   mergeSort(arr, mid+1, e);

   mergeAll(arr, s, e);
}
int main() {
   int arr[] = {12, 11, 13, 5, 6, 7, 7, 7};
   int size = 8;
   mergeSort(arr, 0, size-1);
   for(int i=0; i<size; i++) {
      cout << arr[i] << " ";
   }
   cout << endl;
return 0;
}
